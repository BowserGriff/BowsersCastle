import pygame
from sys import exit
from random import randint, choice

class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        player_walk_1 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/player_walk_1.png').convert_alpha()# convert helps [ygame run faster
        player_walk_2 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/player_walk_2.png').convert_alpha()
        self.player_walk = [player_walk_1,player_walk_2] #needs self because we need to access it outside of this
        self.player_index = 0 #index the walk surface so it chooses which index to use
        self.player_jump = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/jump.png').convert_alpha()
        
        self.image = self.player_walk[self.player_index]
        self.rect = self.image.get_rect(midbottom = (80,300))
        self.gravity = 0

        self.jump_sound = pygame.mixer.Sound('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/audio/jump.mp3')
        self.jump_sound.set_volume(0.5) #Volume is set between 0 and 1

    def player_input(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and self.rect.bottom >= 300:
            self.gravity = -20
            self.jump_sound.play()
    
    def apply_gravity(self):
        self.gravity += 1
        self.rect.y += self.gravity
        if self.rect.bottom >= 300: self.rect.bottom = 300

    def animation_state(self):
        if self.rect.bottom <300:
            self.image = self.player_jump
        else:
            self.player_index += 0.1
            if self.player_index >= len(self.player_walk): self.player_index =0
            self.image = self.player_walk[int(self.player_index)]
    
    def update(self):
        self.player_input()
        self.apply_gravity()
        self.animation_state()


class Obstacle(pygame.sprite.Sprite):
    def __init__(self,type):
        super().__init__() #Do this or it will throw up an error

        if type == 'fly':
            fly_1 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Fly/Fly1.png').convert_alpha()
            fly_2 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Fly/Fly2.png').convert_alpha()
            self.frames = [fly_1, fly_2]
            y_pos = 210
        else:
            snail_1 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/snail/snail1.png').convert_alpha()#converts to alpha so it respects the backgraound before it
            snail_2 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/snail/snail2.png').convert_alpha()
            self.frames = [snail_1, snail_2]
            y_pos = 300

        self.animation_index = 0
        self.image = self.frames[self.animation_index]
        self.rect = self.image.get_rect(midbottom = (randint(900,1100),y_pos))

    def animation_state(self):
        self.animation_index += 0.1
        if self.animation_index >= len(self.frames): self.animation_index = 0
        self.image = self.frames[int(self.animation_index)]

    def update(self):
        self.animation_state()
        self.rect.x -= 6
        self.destroy()

    def destroy(self):
        if self.rect.x <= -100:
            self.kill()


def display_score():
    current_time = int(pygame.time.get_ticks() / 1000) - start_time # -start_time resets the clock after each turn. Set to an int Divide the number down to make the time less overwhelming!
    score_surf = test_font.render(f'Score: {current_time}', False, (64,64,64)) #create time/score surface, turn current time into a string with the f string function
    score_rect = score_surf.get_rect(center = (400 , 50)) #create a rectangle around the score
    screen.blit(score_surf, score_rect)
    return current_time #can call and use the curent time in other functions for example: displaying at the end if a playthrough

def obstacle_movement(obstacle_list):
    if obstacle_list:
        for obstacle_rect in obstacle_list:
            obstacle_rect.x -= 5

            if obstacle_rect.bottom == 300: screen.blit(snail_surf,obstacle_rect)
            else: screen.blit(fly_surf, obstacle_rect)

        obstacle_list = [obstacle for obstacle in obstacle_list if obstacle.x > -100] #deletes the rectangles when off the screen

        return obstacle_list
    else: return []

def collisions(player,obstacles):
    if obstacles:
        for obstacle_rect in obstacles:
            if player.colliderect(obstacle_rect): return False
    return True

def collsion_sprite():
    if pygame.sprite.spritecollide(player.sprite,obstacle_group,False): #(sprite,group,bool)
        obstacle_group.empty()
        return False
    else: return True

def player_animation():
    global player_surf, player_index 
    
    if player_rect.bottom < 300: #display jump animation when player is not on the floor. (0 is the top of the display)
        player_surf = player_jump
    else: 
        player_index += 0.1 # set to 0.1 and 0 TO 1. 0 being walk_1 animation and 1 being walk_2 animation. Setting to 0.1 slows down the speed of changeing through animations
        if player_index >= len(player_walk): player_index = 0 #resets the player_)index back to 0 once it has hit the max of 1, otherwise it would go 0,1,2,3,4,5. But, there are only animations on index 0 and 1.
        player_surf = player_walk[int(player_index)] #display walking animation when player is in the floor

pygame.init() #basically the driver that does all the stuff we command
screen = pygame.display.set_mode((800,400)) #create the display surface, must have variables. Mine is width 800 and height 400
pygame.display.set_caption('Runner') #Renames the window to my title
clock = pygame.time.Clock() #Use this to set the fps
test_font = pygame.font.Font('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/font/Pixeltype.TTF', 50) #font type, font size
game_active = False #Allows the game to have menus because it turns the active game off during menus and game overs
start_time = 0
score = 0
bg_music = pygame.mixer.Sound('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/audio/music.wav')
bg_music.play(loops = -1) #Loop as many times as you want. Infinite = -1

#Groups
player = pygame.sprite.GroupSingle()
player.add(Player())

obstacle_group = pygame.sprite.Group()

sky_surface = pygame.image.load("/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/sky.png").convert() #288,512
ground_surface = pygame.image.load("/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/ground.png").convert()

#score_surf = test_font.render('My Game', True, (64,64,64)) #text, AA, color (AA=anti aliasing = smooth the edges of the text)
#score_rect = score_surf.get_rect(center = (400,50))

#Snail
snail_frame_1 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/snail/snail1.png').convert_alpha()#converts to alpha so it respects the backgraound before it
snail_frame_2 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/snail/snail2.png').convert_alpha()
snail_frames = [snail_frame_1, snail_frame_2]
snail_frame_index = 0
snail_surf = snail_frames[snail_frame_index]

#Fly
fly_frame1 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Fly/Fly1.png').convert_alpha()
fly_frame2 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Fly/Fly2.png').convert_alpha()
fly_frames = [fly_frame1, fly_frame2]
fly_frame_index = 0
fly_surf = fly_frames[fly_frame_index]

obstacle_rect_list = []


player_walk_1 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/player_walk_1.png').convert_alpha()# convert helps [ygame run faster
player_walk_2 = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/player_walk_2.png').convert_alpha()
player_walk = [player_walk_1,player_walk_2]
player_index = 0 #index the walk surface so it chooses which index to use
player_jump = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/jump.png').convert_alpha()

player_surf = player_walk[player_index]
player_rect = player_surf.get_rect(midbottom = (80,300)) #draws a rectangle around an item so it can be easier positioned on screen and help with colisions. Poition is the same y as grond_surface so my character touches the ground.
player_gravity = 0 #Create a figure to which we can add gravity to outside of the loop

# Intro Screen
player_stand = pygame.image.load('/Users/adam/Documents/VSCode Files/UltimatePygameIntro-main/graphics/Player/player_stand.png').convert_alpha() 
player_stand = pygame.transform.rotozoom(player_stand,0,2) # (image, angle, scale) arguably creates a nicer scaling, angle can also rotate the image. (pygame.transform.scale() can also be used but not as nice an image)
player_stand_rect = player_stand.get_rect(center = (400, 200))

game_name = test_font.render('Alien Runner', True, (111,196,169))
game_name_rect = game_name.get_rect(center =  (400, 80))

game_message = test_font.render('Press Space To Run', True, (111, 196, 169))
game_message_rect = game_message.get_rect(center = (400, 330))

# Timer
obstacle_timer = pygame.USEREVENT + 1  #always add a +1 to prevent clahing events
pygame.time.set_timer(obstacle_timer,1500) #The event you want to trigger, how often you want to trigger it

snail_animation_timer = pygame.USEREVENT + 2 #always add a + number different to the other timers to prevent clahing events
pygame.time.set_timer(snail_animation_timer, 500) #The event you want to trigger, how often you want to trigger it

fly_animation_timer = pygame.USEREVENT + 3  #always add a + number different to the other timers to prevent clahing events
pygame.time.set_timer(fly_animation_timer, 200) #The event you want to trigger, how often you want to trigger it

while True:
    for event in pygame.event.get():
        if event.type==pygame.QUIT: #This is to make sure the game can be quit. QUIT is the x button in the top of the window
            pygame.quit()
            exit()

        if game_active:
            if event.type == pygame.MOUSEBUTTONDOWN: #jump
                if player_rect.collidepoint(event.pos) and player_rect.bottom >= 300: 
                    player_gravity = -20

            if event.type == pygame.KEYDOWN: #jump
                if event.key == pygame.K_SPACE and player_rect.bottom >= 300:
                    player_gravity = -20 
        else:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE: #Allows game to restart after a game over
                game_active = True
            
                start_time = int(pygame.time.get_ticks() / 1000)
        
        if game_active: # Only sets timers when game is active
            if event.type == obstacle_timer:
                obstacle_group.add(Obstacle(choice(['fly', 'snail', 'snail', 'snail'])))
                #if randint(0,2):
                 #   obstacle_rect_list.append(snail_surf.get_rect(bottomright = (randint(900,1100),300)))
                #else:
                #    obstacle_rect_list.append(fly_surf.get_rect(bottomright = (randint(900,1100),210)))
            
            if event.type == snail_animation_timer:
                if snail_frame_index == 0: snail_frame_index = 1 
                else: snail_frame_index =0 #This and the line above alternate the index so alternate the animation in the snail_surf
                snail_surf = snail_frames[snail_frame_index]

            if event.type == fly_animation_timer:
                if fly_frame_index == 0: fly_frame_index = 1
                else: fly_frame_index = 0 #This and the line above alternate the index so alternate the animation in the snail_surf
                fly_surf = fly_frames[fly_frame_index]

    if game_active:
        screen.blit(sky_surface,(0,0))#(surface, position w and h) Can change the position of the surface display
        screen.blit(ground_surface,(0,300))
        #pygame.draw.rect(screen, '#c0e8ec', score_rect)
        #pygame.draw.rect(screen, '#c0e8ec', score_rect, 10, 20) #1st which disply, 2nd color, 3rd shape (what shape/where), 4th is option (width), radius
        #screen.blit(score_surf,score_rect)
        score = display_score() #This will allow us to access the score at any time

        #snail_rect.x -= 4 #Have to call a point in the rectangle, anything will do so I chose x, just remember that it is consitant
        #if snail_rect.right <=0: snail_rect.left = 800 #This resets the snail to the left side of the screen once the right part of th e rectanle has left the screen
        #screen.blit(snail_surf,snail_rect) #(surface, position)
        
        #Player
        #player_gravity += 1 
        #player_rect.y += player_gravity #y can be anything, it's just a placeholder makes sense it is y because gravity will act downwards
        #if player_rect.bottom >=300: player_rect.bottom = 300 #everytime the player goes below the ground, he is reset onto the ground
        #player_animation()
        #screen.blit(player_surf, player_rect) #(surface, position) Change this to the player_rect in order to put on the ground.
        player.draw(screen)
        player.update()


        obstacle_group.draw(screen)
        obstacle_group.update()

        #Obstacle Movement 
        #obstacle_rect_list = obstacle_movement(obstacle_rect_list)

        # collision
        game_active = collsion_sprite()
        #game_active = collisions(player_rect, obstacle_rect_list)
 
    else: # Menu! Happens when game_active=False because it's in the else statement of if = game_active:
        screen.fill((94,129,162))
        screen.blit(player_stand, player_stand_rect) #image , position
        obstacle_rect_list.clear()
        player_rect.midbottom = (80,300)
        player_gravity = 0 

        score_message = test_font.render(f'Your score: {score}', True, (111,196,169))
        score_message_rect = score_message.get_rect(center = (400, 330))
        screen.blit(game_name, game_name_rect)

        if score == 0: screen.blit(game_message, game_message_rect)#if there is no score 
        else: screen.blit(score_message, score_message_rect)#if there is a score 

    pygame.display.update()
    clock.tick(60) #While loop is True, it should not run quicker than 60fps. Sets maximum frame rate so it doesnt run too fast on fast computers
